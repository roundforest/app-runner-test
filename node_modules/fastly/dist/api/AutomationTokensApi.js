"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AutomationTokenCreateRequest = _interopRequireDefault(require("../model/AutomationTokenCreateRequest"));
var _AutomationTokenCreateResponse = _interopRequireDefault(require("../model/AutomationTokenCreateResponse"));
var _AutomationTokenResponse = _interopRequireDefault(require("../model/AutomationTokenResponse"));
var _InlineResponse = _interopRequireDefault(require("../model/InlineResponse2001"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* AutomationTokens service.
* @module api/AutomationTokensApi
* @version 4.1.1
*/
var AutomationTokensApi = /*#__PURE__*/function () {
  /**
  * Constructs a new AutomationTokensApi. 
  * @alias module:api/AutomationTokensApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function AutomationTokensApi(apiClient) {
    _classCallCheck(this, AutomationTokensApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Creates a new automation token.
   * @param {Object} options
   * @param {module:model/AutomationTokenCreateRequest} [options.automation_token_create_request]
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationTokenCreateResponse} and HTTP response
   */
  _createClass(AutomationTokensApi, [{
    key: "createAutomationTokenWithHttpInfo",
    value: function createAutomationTokenWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = options['automation_token_create_request'];
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = _AutomationTokenCreateResponse["default"];
      return this.apiClient.callApi('/automation-tokens', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Creates a new automation token.
     * @param {Object} options
     * @param {module:model/AutomationTokenCreateRequest} [options.automation_token_create_request]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationTokenCreateResponse}
     */
  }, {
    key: "createAutomationToken",
    value: function createAutomationToken() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.createAutomationTokenWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieves an automation token by ID.
     * @param {Object} options
     * @param {String} options.id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationTokenResponse} and HTTP response
     */
  }, {
    key: "getAutomationTokenIdWithHttpInfo",
    value: function getAutomationTokenIdWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'id' is set.
      if (options['id'] === undefined || options['id'] === null) {
        throw new Error("Missing the required parameter 'id'.");
      }
      var pathParams = {
        'id': options['id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/vnd.api+json', 'application/problem+json'];
      var returnType = _AutomationTokenResponse["default"];
      return this.apiClient.callApi('/automation-tokens/{id}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieves an automation token by ID.
     * @param {Object} options
     * @param {String} options.id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationTokenResponse}
     */
  }, {
    key: "getAutomationTokenId",
    value: function getAutomationTokenId() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getAutomationTokenIdWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List of services associated with the automation token.
     * @param {Object} options
     * @param {String} options.id
     * @param {Number} [options.per_page]
     * @param {Number} [options.page]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
  }, {
    key: "getAutomationTokensIdServicesWithHttpInfo",
    value: function getAutomationTokensIdServicesWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'id' is set.
      if (options['id'] === undefined || options['id'] === null) {
        throw new Error("Missing the required parameter 'id'.");
      }
      var pathParams = {
        'id': options['id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {
        'per_page': options['per_page'],
        'page': options['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/vnd.api+json', 'application/problem+json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/automation-tokens/{id}/services', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List of services associated with the automation token.
     * @param {Object} options
     * @param {String} options.id
     * @param {Number} [options.per_page]
     * @param {Number} [options.page]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
  }, {
    key: "getAutomationTokensIdServices",
    value: function getAutomationTokensIdServices() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getAutomationTokensIdServicesWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Lists all automation tokens for a customer.
     * @param {Object} options
     * @param {Number} [options.per_page]
     * @param {Number} [options.page]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AutomationTokenResponse>} and HTTP response
     */
  }, {
    key: "listAutomationTokensWithHttpInfo",
    value: function listAutomationTokensWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {
        'per_page': options['per_page'],
        'page': options['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/vnd.api+json', 'application/problem+json'];
      var returnType = [_AutomationTokenResponse["default"]];
      return this.apiClient.callApi('/automation-tokens', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Lists all automation tokens for a customer.
     * @param {Object} options
     * @param {Number} [options.per_page]
     * @param {Number} [options.page]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AutomationTokenResponse>}
     */
  }, {
    key: "listAutomationTokens",
    value: function listAutomationTokens() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listAutomationTokensWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Revoke an automation token by ID.
     * @param {Object} options
     * @param {String} options.id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "revokeAutomationTokenIdWithHttpInfo",
    value: function revokeAutomationTokenIdWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'id' is set.
      if (options['id'] === undefined || options['id'] === null) {
        throw new Error("Missing the required parameter 'id'.");
      }
      var pathParams = {
        'id': options['id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/vnd.api+json', 'application/problem+json'];
      var returnType = null;
      return this.apiClient.callApi('/automation-tokens/{id}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Revoke an automation token by ID.
     * @param {Object} options
     * @param {String} options.id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "revokeAutomationTokenId",
    value: function revokeAutomationTokenId() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.revokeAutomationTokenIdWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return AutomationTokensApi;
}();
exports["default"] = AutomationTokensApi;