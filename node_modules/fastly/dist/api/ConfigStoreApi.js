"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ConfigStoreInfoResponse = _interopRequireDefault(require("../model/ConfigStoreInfoResponse"));
var _ConfigStoreResponse = _interopRequireDefault(require("../model/ConfigStoreResponse"));
var _InlineResponse = _interopRequireDefault(require("../model/InlineResponse200"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* ConfigStore service.
* @module api/ConfigStoreApi
* @version 4.1.1
*/
var ConfigStoreApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ConfigStoreApi. 
  * @alias module:api/ConfigStoreApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ConfigStoreApi(apiClient) {
    _classCallCheck(this, ConfigStoreApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Create a config store.
   * @param {Object} options
   * @param {String} [options.name] - The name of the config store.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigStoreResponse} and HTTP response
   */
  _createClass(ConfigStoreApi, [{
    key: "createConfigStoreWithHttpInfo",
    value: function createConfigStoreWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'name': options['name']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ConfigStoreResponse["default"];
      return this.apiClient.callApi('/resources/stores/config', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create a config store.
     * @param {Object} options
     * @param {String} [options.name] - The name of the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigStoreResponse}
     */
  }, {
    key: "createConfigStore",
    value: function createConfigStore() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.createConfigStoreWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete a config store.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
  }, {
    key: "deleteConfigStoreWithHttpInfo",
    value: function deleteConfigStoreWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete a config store.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
  }, {
    key: "deleteConfigStore",
    value: function deleteConfigStore() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteConfigStoreWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Describe a config store by its identifier.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigStoreResponse} and HTTP response
     */
  }, {
    key: "getConfigStoreWithHttpInfo",
    value: function getConfigStoreWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ConfigStoreResponse["default"];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Describe a config store by its identifier.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigStoreResponse}
     */
  }, {
    key: "getConfigStore",
    value: function getConfigStore() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getConfigStoreWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve metadata for a single config store.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigStoreInfoResponse} and HTTP response
     */
  }, {
    key: "getConfigStoreInfoWithHttpInfo",
    value: function getConfigStoreInfoWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ConfigStoreInfoResponse["default"];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}/info', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve metadata for a single config store.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigStoreInfoResponse}
     */
  }, {
    key: "getConfigStoreInfo",
    value: function getConfigStoreInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getConfigStoreInfoWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List services linked to a config store
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "listConfigStoreServicesWithHttpInfo",
    value: function listConfigStoreServicesWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}/services', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List services linked to a config store
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "listConfigStoreServices",
    value: function listConfigStoreServices() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listConfigStoreServicesWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List config stores.
     * @param {Object} options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ConfigStoreResponse>} and HTTP response
     */
  }, {
    key: "listConfigStoresWithHttpInfo",
    value: function listConfigStoresWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_ConfigStoreResponse["default"]];
      return this.apiClient.callApi('/resources/stores/config', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List config stores.
     * @param {Object} options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ConfigStoreResponse>}
     */
  }, {
    key: "listConfigStores",
    value: function listConfigStores() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listConfigStoresWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update a config store.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} [options.name] - The name of the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigStoreResponse} and HTTP response
     */
  }, {
    key: "updateConfigStoreWithHttpInfo",
    value: function updateConfigStoreWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'name': options['name']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ConfigStoreResponse["default"];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}', 'PUT', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update a config store.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} [options.name] - The name of the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigStoreResponse}
     */
  }, {
    key: "updateConfigStore",
    value: function updateConfigStore() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.updateConfigStoreWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ConfigStoreApi;
}();
exports["default"] = ConfigStoreApi;