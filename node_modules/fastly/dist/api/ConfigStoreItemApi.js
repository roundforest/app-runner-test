"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _BulkUpdateConfigStoreListRequest = _interopRequireDefault(require("../model/BulkUpdateConfigStoreListRequest"));
var _ConfigStoreItemResponse = _interopRequireDefault(require("../model/ConfigStoreItemResponse"));
var _InlineResponse = _interopRequireDefault(require("../model/InlineResponse200"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* ConfigStoreItem service.
* @module api/ConfigStoreItemApi
* @version 4.1.1
*/
var ConfigStoreItemApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ConfigStoreItemApi. 
  * @alias module:api/ConfigStoreItemApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ConfigStoreItemApi(apiClient) {
    _classCallCheck(this, ConfigStoreItemApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Add multiple key-value pairs to an individual config store, specified by ID.
   * @param {Object} options
   * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
   * @param {module:model/BulkUpdateConfigStoreListRequest} [options.bulk_update_config_store_list_request]
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
   */
  _createClass(ConfigStoreItemApi, [{
    key: "bulkUpdateConfigStoreItemWithHttpInfo",
    value: function bulkUpdateConfigStoreItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = options['bulk_update_config_store_list_request'];
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}/items', 'PATCH', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Add multiple key-value pairs to an individual config store, specified by ID.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {module:model/BulkUpdateConfigStoreListRequest} [options.bulk_update_config_store_list_request]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
  }, {
    key: "bulkUpdateConfigStoreItem",
    value: function bulkUpdateConfigStoreItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.bulkUpdateConfigStoreItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Add a single key-value pair to an individual config store, specified by ID.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigStoreItemResponse} and HTTP response
     */
  }, {
    key: "createConfigStoreItemWithHttpInfo",
    value: function createConfigStoreItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'item_key': options['item_key'],
        'item_value': options['item_value']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ConfigStoreItemResponse["default"];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}/item', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Add a single key-value pair to an individual config store, specified by ID.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigStoreItemResponse}
     */
  }, {
    key: "createConfigStoreItem",
    value: function createConfigStoreItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.createConfigStoreItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete an entry in a config store given a config store ID, and item key.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} options.config_store_item_key - Item key, maximum 256 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
  }, {
    key: "deleteConfigStoreItemWithHttpInfo",
    value: function deleteConfigStoreItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      // Verify the required parameter 'config_store_item_key' is set.
      if (options['config_store_item_key'] === undefined || options['config_store_item_key'] === null) {
        throw new Error("Missing the required parameter 'config_store_item_key'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id'],
        'config_store_item_key': options['config_store_item_key']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}/item/{config_store_item_key}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete an entry in a config store given a config store ID, and item key.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} options.config_store_item_key - Item key, maximum 256 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
  }, {
    key: "deleteConfigStoreItem",
    value: function deleteConfigStoreItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteConfigStoreItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve a config store entry given a config store ID and item key.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} options.config_store_item_key - Item key, maximum 256 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigStoreItemResponse} and HTTP response
     */
  }, {
    key: "getConfigStoreItemWithHttpInfo",
    value: function getConfigStoreItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      // Verify the required parameter 'config_store_item_key' is set.
      if (options['config_store_item_key'] === undefined || options['config_store_item_key'] === null) {
        throw new Error("Missing the required parameter 'config_store_item_key'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id'],
        'config_store_item_key': options['config_store_item_key']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ConfigStoreItemResponse["default"];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}/item/{config_store_item_key}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve a config store entry given a config store ID and item key.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} options.config_store_item_key - Item key, maximum 256 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigStoreItemResponse}
     */
  }, {
    key: "getConfigStoreItem",
    value: function getConfigStoreItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getConfigStoreItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List the key-value pairs associated with a given config store ID.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ConfigStoreItemResponse>} and HTTP response
     */
  }, {
    key: "listConfigStoreItemsWithHttpInfo",
    value: function listConfigStoreItemsWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_ConfigStoreItemResponse["default"]];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}/items', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List the key-value pairs associated with a given config store ID.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ConfigStoreItemResponse>}
     */
  }, {
    key: "listConfigStoreItems",
    value: function listConfigStoreItems() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listConfigStoreItemsWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update an entry in a config store given a config store ID, item key, and item value.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} options.config_store_item_key - Item key, maximum 256 characters.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigStoreItemResponse} and HTTP response
     */
  }, {
    key: "updateConfigStoreItemWithHttpInfo",
    value: function updateConfigStoreItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      // Verify the required parameter 'config_store_item_key' is set.
      if (options['config_store_item_key'] === undefined || options['config_store_item_key'] === null) {
        throw new Error("Missing the required parameter 'config_store_item_key'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id'],
        'config_store_item_key': options['config_store_item_key']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'item_key': options['item_key'],
        'item_value': options['item_value']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ConfigStoreItemResponse["default"];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}/item/{config_store_item_key}', 'PATCH', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update an entry in a config store given a config store ID, item key, and item value.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} options.config_store_item_key - Item key, maximum 256 characters.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigStoreItemResponse}
     */
  }, {
    key: "updateConfigStoreItem",
    value: function updateConfigStoreItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.updateConfigStoreItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Insert or update an entry in a config store given a config store ID, item key, and item value.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} options.config_store_item_key - Item key, maximum 256 characters.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigStoreItemResponse} and HTTP response
     */
  }, {
    key: "upsertConfigStoreItemWithHttpInfo",
    value: function upsertConfigStoreItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'config_store_id' is set.
      if (options['config_store_id'] === undefined || options['config_store_id'] === null) {
        throw new Error("Missing the required parameter 'config_store_id'.");
      }
      // Verify the required parameter 'config_store_item_key' is set.
      if (options['config_store_item_key'] === undefined || options['config_store_item_key'] === null) {
        throw new Error("Missing the required parameter 'config_store_item_key'.");
      }
      var pathParams = {
        'config_store_id': options['config_store_id'],
        'config_store_item_key': options['config_store_item_key']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'item_key': options['item_key'],
        'item_value': options['item_value']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ConfigStoreItemResponse["default"];
      return this.apiClient.callApi('/resources/stores/config/{config_store_id}/item/{config_store_item_key}', 'PUT', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Insert or update an entry in a config store given a config store ID, item key, and item value.
     * @param {Object} options
     * @param {String} options.config_store_id - An alphanumeric string identifying the config store.
     * @param {String} options.config_store_item_key - Item key, maximum 256 characters.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigStoreItemResponse}
     */
  }, {
    key: "upsertConfigStoreItem",
    value: function upsertConfigStoreItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.upsertConfigStoreItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ConfigStoreItemApi;
}();
exports["default"] = ConfigStoreItemApi;