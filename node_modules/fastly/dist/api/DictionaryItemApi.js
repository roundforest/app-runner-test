"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _BulkUpdateDictionaryListRequest = _interopRequireDefault(require("../model/BulkUpdateDictionaryListRequest"));
var _DictionaryItemResponse = _interopRequireDefault(require("../model/DictionaryItemResponse"));
var _InlineResponse = _interopRequireDefault(require("../model/InlineResponse200"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* DictionaryItem service.
* @module api/DictionaryItemApi
* @version 4.1.1
*/
var DictionaryItemApi = /*#__PURE__*/function () {
  /**
  * Constructs a new DictionaryItemApi. 
  * @alias module:api/DictionaryItemApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DictionaryItemApi(apiClient) {
    _classCallCheck(this, DictionaryItemApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Update multiple items in the same dictionary. For faster updates to your service, group your changes into large batches. The maximum batch size is 1000 items. [Contact support](https://support.fastly.com/) to discuss raising this limit.
   * @param {Object} options
   * @param {String} options.service_id - Alphanumeric string identifying the service.
   * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
   * @param {module:model/BulkUpdateDictionaryListRequest} [options.bulk_update_dictionary_list_request]
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
   */
  _createClass(DictionaryItemApi, [{
    key: "bulkUpdateDictionaryItemWithHttpInfo",
    value: function bulkUpdateDictionaryItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = options['bulk_update_dictionary_list_request'];
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'dictionary_id' is set.
      if (options['dictionary_id'] === undefined || options['dictionary_id'] === null) {
        throw new Error("Missing the required parameter 'dictionary_id'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'dictionary_id': options['dictionary_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/dictionary/{dictionary_id}/items', 'PATCH', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update multiple items in the same dictionary. For faster updates to your service, group your changes into large batches. The maximum batch size is 1000 items. [Contact support](https://support.fastly.com/) to discuss raising this limit.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {module:model/BulkUpdateDictionaryListRequest} [options.bulk_update_dictionary_list_request]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
  }, {
    key: "bulkUpdateDictionaryItem",
    value: function bulkUpdateDictionaryItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.bulkUpdateDictionaryItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create DictionaryItem given service, dictionary ID, item key, and item value.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DictionaryItemResponse} and HTTP response
     */
  }, {
    key: "createDictionaryItemWithHttpInfo",
    value: function createDictionaryItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'dictionary_id' is set.
      if (options['dictionary_id'] === undefined || options['dictionary_id'] === null) {
        throw new Error("Missing the required parameter 'dictionary_id'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'dictionary_id': options['dictionary_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'item_key': options['item_key'],
        'item_value': options['item_value']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _DictionaryItemResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/dictionary/{dictionary_id}/item', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create DictionaryItem given service, dictionary ID, item key, and item value.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DictionaryItemResponse}
     */
  }, {
    key: "createDictionaryItem",
    value: function createDictionaryItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.createDictionaryItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete DictionaryItem given service, dictionary ID, and item key.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {String} options.dictionary_item_key - Item key, maximum 256 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
  }, {
    key: "deleteDictionaryItemWithHttpInfo",
    value: function deleteDictionaryItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'dictionary_id' is set.
      if (options['dictionary_id'] === undefined || options['dictionary_id'] === null) {
        throw new Error("Missing the required parameter 'dictionary_id'.");
      }
      // Verify the required parameter 'dictionary_item_key' is set.
      if (options['dictionary_item_key'] === undefined || options['dictionary_item_key'] === null) {
        throw new Error("Missing the required parameter 'dictionary_item_key'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'dictionary_id': options['dictionary_id'],
        'dictionary_item_key': options['dictionary_item_key']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/dictionary/{dictionary_id}/item/{dictionary_item_key}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete DictionaryItem given service, dictionary ID, and item key.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {String} options.dictionary_item_key - Item key, maximum 256 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
  }, {
    key: "deleteDictionaryItem",
    value: function deleteDictionaryItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteDictionaryItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve a single DictionaryItem given service, dictionary ID and item key.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {String} options.dictionary_item_key - Item key, maximum 256 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DictionaryItemResponse} and HTTP response
     */
  }, {
    key: "getDictionaryItemWithHttpInfo",
    value: function getDictionaryItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'dictionary_id' is set.
      if (options['dictionary_id'] === undefined || options['dictionary_id'] === null) {
        throw new Error("Missing the required parameter 'dictionary_id'.");
      }
      // Verify the required parameter 'dictionary_item_key' is set.
      if (options['dictionary_item_key'] === undefined || options['dictionary_item_key'] === null) {
        throw new Error("Missing the required parameter 'dictionary_item_key'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'dictionary_id': options['dictionary_id'],
        'dictionary_item_key': options['dictionary_item_key']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _DictionaryItemResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/dictionary/{dictionary_id}/item/{dictionary_item_key}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve a single DictionaryItem given service, dictionary ID and item key.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {String} options.dictionary_item_key - Item key, maximum 256 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DictionaryItemResponse}
     */
  }, {
    key: "getDictionaryItem",
    value: function getDictionaryItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getDictionaryItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List of DictionaryItems given service and dictionary ID.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {Number} [options.page] - Current page.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {String} [options.sort='created'] - Field on which to sort.
     * @param {module:model/String} [options.direction='ascend'] - Direction in which to sort results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/DictionaryItemResponse>} and HTTP response
     */
  }, {
    key: "listDictionaryItemsWithHttpInfo",
    value: function listDictionaryItemsWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'dictionary_id' is set.
      if (options['dictionary_id'] === undefined || options['dictionary_id'] === null) {
        throw new Error("Missing the required parameter 'dictionary_id'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'dictionary_id': options['dictionary_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {
        'page': options['page'],
        'per_page': options['per_page'],
        'sort': options['sort'],
        'direction': options['direction']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_DictionaryItemResponse["default"]];
      return this.apiClient.callApi('/service/{service_id}/dictionary/{dictionary_id}/items', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List of DictionaryItems given service and dictionary ID.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {Number} [options.page] - Current page.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {String} [options.sort='created'] - Field on which to sort.
     * @param {module:model/String} [options.direction='ascend'] - Direction in which to sort results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/DictionaryItemResponse>}
     */
  }, {
    key: "listDictionaryItems",
    value: function listDictionaryItems() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listDictionaryItemsWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update DictionaryItem given service, dictionary ID, item key, and item value.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {String} options.dictionary_item_key - Item key, maximum 256 characters.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DictionaryItemResponse} and HTTP response
     */
  }, {
    key: "updateDictionaryItemWithHttpInfo",
    value: function updateDictionaryItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'dictionary_id' is set.
      if (options['dictionary_id'] === undefined || options['dictionary_id'] === null) {
        throw new Error("Missing the required parameter 'dictionary_id'.");
      }
      // Verify the required parameter 'dictionary_item_key' is set.
      if (options['dictionary_item_key'] === undefined || options['dictionary_item_key'] === null) {
        throw new Error("Missing the required parameter 'dictionary_item_key'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'dictionary_id': options['dictionary_id'],
        'dictionary_item_key': options['dictionary_item_key']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'item_key': options['item_key'],
        'item_value': options['item_value']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _DictionaryItemResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/dictionary/{dictionary_id}/item/{dictionary_item_key}', 'PATCH', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update DictionaryItem given service, dictionary ID, item key, and item value.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {String} options.dictionary_item_key - Item key, maximum 256 characters.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DictionaryItemResponse}
     */
  }, {
    key: "updateDictionaryItem",
    value: function updateDictionaryItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.updateDictionaryItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Upsert DictionaryItem given service, dictionary ID, item key, and item value.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {String} options.dictionary_item_key - Item key, maximum 256 characters.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DictionaryItemResponse} and HTTP response
     */
  }, {
    key: "upsertDictionaryItemWithHttpInfo",
    value: function upsertDictionaryItemWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'dictionary_id' is set.
      if (options['dictionary_id'] === undefined || options['dictionary_id'] === null) {
        throw new Error("Missing the required parameter 'dictionary_id'.");
      }
      // Verify the required parameter 'dictionary_item_key' is set.
      if (options['dictionary_item_key'] === undefined || options['dictionary_item_key'] === null) {
        throw new Error("Missing the required parameter 'dictionary_item_key'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'dictionary_id': options['dictionary_id'],
        'dictionary_item_key': options['dictionary_item_key']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'item_key': options['item_key'],
        'item_value': options['item_value']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _DictionaryItemResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/dictionary/{dictionary_id}/item/{dictionary_item_key}', 'PUT', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Upsert DictionaryItem given service, dictionary ID, item key, and item value.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.dictionary_id - Alphanumeric string identifying a Dictionary.
     * @param {String} options.dictionary_item_key - Item key, maximum 256 characters.
     * @param {String} [options.item_key] - Item key, maximum 256 characters.
     * @param {String} [options.item_value] - Item value, maximum 8000 characters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DictionaryItemResponse}
     */
  }, {
    key: "upsertDictionaryItem",
    value: function upsertDictionaryItem() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.upsertDictionaryItemWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return DictionaryItemApi;
}();
exports["default"] = DictionaryItemApi;