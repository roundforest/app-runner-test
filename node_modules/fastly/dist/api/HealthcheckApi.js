"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _HealthcheckResponse = _interopRequireDefault(require("../model/HealthcheckResponse"));
var _InlineResponse = _interopRequireDefault(require("../model/InlineResponse200"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* Healthcheck service.
* @module api/HealthcheckApi
* @version 4.1.1
*/
var HealthcheckApi = /*#__PURE__*/function () {
  /**
  * Constructs a new HealthcheckApi. 
  * @alias module:api/HealthcheckApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function HealthcheckApi(apiClient) {
    _classCallCheck(this, HealthcheckApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Create a health check for a particular service and version.
   * @param {Object} options
   * @param {String} options.service_id - Alphanumeric string identifying the service.
   * @param {Number} options.version_id - Integer identifying a service version.
   * @param {Number} [options.check_interval] - How often to run the health check in milliseconds.
   * @param {String} [options.comment] - A freeform descriptive note.
   * @param {Number} [options.expected_response] - The status code expected from the host.
   * @param {Array.<String>} [options.headers] - Array of custom headers that will be added to the health check probes.
   * @param {String} [options.host] - Which host to check.
   * @param {String} [options.http_version] - Whether to use version 1.0 or 1.1 HTTP.
   * @param {Number} [options.initial] - When loading a config, the initial number of probes to be seen as OK.
   * @param {String} [options.method] - Which HTTP method to use.
   * @param {String} [options.name] - The name of the health check.
   * @param {String} [options.path] - The path to check.
   * @param {Number} [options.threshold] - How many health checks must succeed to be considered healthy.
   * @param {Number} [options.timeout] - Timeout in milliseconds.
   * @param {Number} [options.window] - The number of most recent health check queries to keep for this health check.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthcheckResponse} and HTTP response
   */
  _createClass(HealthcheckApi, [{
    key: "createHealthcheckWithHttpInfo",
    value: function createHealthcheckWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'version_id' is set.
      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'check_interval': options['check_interval'],
        'comment': options['comment'],
        'expected_response': options['expected_response'],
        'headers': this.apiClient.buildCollectionParam(options['headers'], 'csv'),
        'host': options['host'],
        'http_version': options['http_version'],
        'initial': options['initial'],
        'method': options['method'],
        'name': options['name'],
        'path': options['path'],
        'threshold': options['threshold'],
        'timeout': options['timeout'],
        'window': options['window']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _HealthcheckResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/version/{version_id}/healthcheck', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create a health check for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @param {Number} [options.check_interval] - How often to run the health check in milliseconds.
     * @param {String} [options.comment] - A freeform descriptive note.
     * @param {Number} [options.expected_response] - The status code expected from the host.
     * @param {Array.<String>} [options.headers] - Array of custom headers that will be added to the health check probes.
     * @param {String} [options.host] - Which host to check.
     * @param {String} [options.http_version] - Whether to use version 1.0 or 1.1 HTTP.
     * @param {Number} [options.initial] - When loading a config, the initial number of probes to be seen as OK.
     * @param {String} [options.method] - Which HTTP method to use.
     * @param {String} [options.name] - The name of the health check.
     * @param {String} [options.path] - The path to check.
     * @param {Number} [options.threshold] - How many health checks must succeed to be considered healthy.
     * @param {Number} [options.timeout] - Timeout in milliseconds.
     * @param {Number} [options.window] - The number of most recent health check queries to keep for this health check.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthcheckResponse}
     */
  }, {
    key: "createHealthcheck",
    value: function createHealthcheck() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.createHealthcheckWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete the health check for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @param {String} options.healthcheck_name - The name of the health check.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
  }, {
    key: "deleteHealthcheckWithHttpInfo",
    value: function deleteHealthcheckWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'version_id' is set.
      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }
      // Verify the required parameter 'healthcheck_name' is set.
      if (options['healthcheck_name'] === undefined || options['healthcheck_name'] === null) {
        throw new Error("Missing the required parameter 'healthcheck_name'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id'],
        'healthcheck_name': options['healthcheck_name']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/version/{version_id}/healthcheck/{healthcheck_name}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete the health check for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @param {String} options.healthcheck_name - The name of the health check.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
  }, {
    key: "deleteHealthcheck",
    value: function deleteHealthcheck() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteHealthcheckWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get the health check for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @param {String} options.healthcheck_name - The name of the health check.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthcheckResponse} and HTTP response
     */
  }, {
    key: "getHealthcheckWithHttpInfo",
    value: function getHealthcheckWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'version_id' is set.
      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }
      // Verify the required parameter 'healthcheck_name' is set.
      if (options['healthcheck_name'] === undefined || options['healthcheck_name'] === null) {
        throw new Error("Missing the required parameter 'healthcheck_name'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id'],
        'healthcheck_name': options['healthcheck_name']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _HealthcheckResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/version/{version_id}/healthcheck/{healthcheck_name}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get the health check for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @param {String} options.healthcheck_name - The name of the health check.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthcheckResponse}
     */
  }, {
    key: "getHealthcheck",
    value: function getHealthcheck() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getHealthcheckWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all of the health checks for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/HealthcheckResponse>} and HTTP response
     */
  }, {
    key: "listHealthchecksWithHttpInfo",
    value: function listHealthchecksWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'version_id' is set.
      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_HealthcheckResponse["default"]];
      return this.apiClient.callApi('/service/{service_id}/version/{version_id}/healthcheck', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all of the health checks for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/HealthcheckResponse>}
     */
  }, {
    key: "listHealthchecks",
    value: function listHealthchecks() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listHealthchecksWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update the health check for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @param {String} options.healthcheck_name - The name of the health check.
     * @param {Number} [options.check_interval] - How often to run the health check in milliseconds.
     * @param {String} [options.comment] - A freeform descriptive note.
     * @param {Number} [options.expected_response] - The status code expected from the host.
     * @param {Array.<String>} [options.headers] - Array of custom headers that will be added to the health check probes.
     * @param {String} [options.host] - Which host to check.
     * @param {String} [options.http_version] - Whether to use version 1.0 or 1.1 HTTP.
     * @param {Number} [options.initial] - When loading a config, the initial number of probes to be seen as OK.
     * @param {String} [options.method] - Which HTTP method to use.
     * @param {String} [options.name] - The name of the health check.
     * @param {String} [options.path] - The path to check.
     * @param {Number} [options.threshold] - How many health checks must succeed to be considered healthy.
     * @param {Number} [options.timeout] - Timeout in milliseconds.
     * @param {Number} [options.window] - The number of most recent health check queries to keep for this health check.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthcheckResponse} and HTTP response
     */
  }, {
    key: "updateHealthcheckWithHttpInfo",
    value: function updateHealthcheckWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'version_id' is set.
      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }
      // Verify the required parameter 'healthcheck_name' is set.
      if (options['healthcheck_name'] === undefined || options['healthcheck_name'] === null) {
        throw new Error("Missing the required parameter 'healthcheck_name'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id'],
        'healthcheck_name': options['healthcheck_name']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'check_interval': options['check_interval'],
        'comment': options['comment'],
        'expected_response': options['expected_response'],
        'headers': this.apiClient.buildCollectionParam(options['headers'], 'csv'),
        'host': options['host'],
        'http_version': options['http_version'],
        'initial': options['initial'],
        'method': options['method'],
        'name': options['name'],
        'path': options['path'],
        'threshold': options['threshold'],
        'timeout': options['timeout'],
        'window': options['window']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _HealthcheckResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/version/{version_id}/healthcheck/{healthcheck_name}', 'PUT', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update the health check for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @param {String} options.healthcheck_name - The name of the health check.
     * @param {Number} [options.check_interval] - How often to run the health check in milliseconds.
     * @param {String} [options.comment] - A freeform descriptive note.
     * @param {Number} [options.expected_response] - The status code expected from the host.
     * @param {Array.<String>} [options.headers] - Array of custom headers that will be added to the health check probes.
     * @param {String} [options.host] - Which host to check.
     * @param {String} [options.http_version] - Whether to use version 1.0 or 1.1 HTTP.
     * @param {Number} [options.initial] - When loading a config, the initial number of probes to be seen as OK.
     * @param {String} [options.method] - Which HTTP method to use.
     * @param {String} [options.name] - The name of the health check.
     * @param {String} [options.path] - The path to check.
     * @param {Number} [options.threshold] - How many health checks must succeed to be considered healthy.
     * @param {Number} [options.timeout] - Timeout in milliseconds.
     * @param {Number} [options.window] - The number of most recent health check queries to keep for this health check.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthcheckResponse}
     */
  }, {
    key: "updateHealthcheck",
    value: function updateHealthcheck() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.updateHealthcheckWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return HealthcheckApi;
}();
exports["default"] = HealthcheckApi;