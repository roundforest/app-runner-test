"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* IamUserGroups service.
* @module api/IamUserGroupsApi
* @version 4.1.1
*/
var IamUserGroupsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new IamUserGroupsApi. 
  * @alias module:api/IamUserGroupsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function IamUserGroupsApi(apiClient) {
    _classCallCheck(this, IamUserGroupsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Delete a user group.
   * @param {Object} options
   * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  _createClass(IamUserGroupsApi, [{
    key: "deleteAUserGroupWithHttpInfo",
    value: function deleteAUserGroupWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'user_group_id' is set.
      if (options['user_group_id'] === undefined || options['user_group_id'] === null) {
        throw new Error("Missing the required parameter 'user_group_id'.");
      }
      var pathParams = {
        'user_group_id': options['user_group_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/user-groups/{user_group_id}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "deleteAUserGroup",
    value: function deleteAUserGroup() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteAUserGroupWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "getAUserGroupWithHttpInfo",
    value: function getAUserGroupWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'user_group_id' is set.
      if (options['user_group_id'] === undefined || options['user_group_id'] === null) {
        throw new Error("Missing the required parameter 'user_group_id'.");
      }
      var pathParams = {
        'user_group_id': options['user_group_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/user-groups/{user_group_id}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "getAUserGroup",
    value: function getAUserGroup() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getAUserGroupWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List members of a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "listUserGroupMembersWithHttpInfo",
    value: function listUserGroupMembersWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'user_group_id' is set.
      if (options['user_group_id'] === undefined || options['user_group_id'] === null) {
        throw new Error("Missing the required parameter 'user_group_id'.");
      }
      var pathParams = {
        'user_group_id': options['user_group_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {
        'per_page': options['per_page'],
        'page': options['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/user-groups/{user_group_id}/members', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List members of a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "listUserGroupMembers",
    value: function listUserGroupMembers() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listUserGroupMembersWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List roles in a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "listUserGroupRolesWithHttpInfo",
    value: function listUserGroupRolesWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'user_group_id' is set.
      if (options['user_group_id'] === undefined || options['user_group_id'] === null) {
        throw new Error("Missing the required parameter 'user_group_id'.");
      }
      var pathParams = {
        'user_group_id': options['user_group_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {
        'per_page': options['per_page'],
        'page': options['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/user-groups/{user_group_id}/roles', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List roles in a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "listUserGroupRoles",
    value: function listUserGroupRoles() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listUserGroupRolesWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List service groups in a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "listUserGroupServiceGroupsWithHttpInfo",
    value: function listUserGroupServiceGroupsWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'user_group_id' is set.
      if (options['user_group_id'] === undefined || options['user_group_id'] === null) {
        throw new Error("Missing the required parameter 'user_group_id'.");
      }
      var pathParams = {
        'user_group_id': options['user_group_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {
        'per_page': options['per_page'],
        'page': options['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/user-groups/{user_group_id}/service-groups', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List service groups in a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "listUserGroupServiceGroups",
    value: function listUserGroupServiceGroups() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listUserGroupServiceGroupsWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all user groups.
     * @param {Object} options
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "listUserGroupsWithHttpInfo",
    value: function listUserGroupsWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {
        'per_page': options['per_page'],
        'page': options['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/user-groups', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all user groups.
     * @param {Object} options
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "listUserGroups",
    value: function listUserGroups() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listUserGroupsWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return IamUserGroupsApi;
}();
exports["default"] = IamUserGroupsApi;