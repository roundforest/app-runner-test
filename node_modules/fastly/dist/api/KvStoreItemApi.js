"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _InlineResponse = _interopRequireDefault(require("../model/InlineResponse2004"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* KvStoreItem service.
* @module api/KvStoreItemApi
* @version 4.1.1
*/
var KvStoreItemApi = /*#__PURE__*/function () {
  /**
  * Constructs a new KvStoreItemApi. 
  * @alias module:api/KvStoreItemApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function KvStoreItemApi(apiClient) {
    _classCallCheck(this, KvStoreItemApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Delete an item from an kv store
   * @param {Object} options
   * @param {String} options.store_id
   * @param {String} options.key_name
   * @param {Boolean} [options.force]
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  _createClass(KvStoreItemApi, [{
    key: "deleteKeyFromStoreWithHttpInfo",
    value: function deleteKeyFromStoreWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'store_id' is set.
      if (options['store_id'] === undefined || options['store_id'] === null) {
        throw new Error("Missing the required parameter 'store_id'.");
      }
      // Verify the required parameter 'key_name' is set.
      if (options['key_name'] === undefined || options['key_name'] === null) {
        throw new Error("Missing the required parameter 'key_name'.");
      }
      var pathParams = {
        'store_id': options['store_id'],
        'key_name': options['key_name']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {
        'force': options['force']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/resources/stores/kv/{store_id}/keys/{key_name}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete an item from an kv store
     * @param {Object} options
     * @param {String} options.store_id
     * @param {String} options.key_name
     * @param {Boolean} [options.force]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "deleteKeyFromStore",
    value: function deleteKeyFromStore() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteKeyFromStoreWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List the keys of all items within an kv store.
     * @param {Object} options
     * @param {String} options.store_id
     * @param {String} [options.cursor]
     * @param {Number} [options.limit=100]
     * @param {String} [options.prefix]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
  }, {
    key: "getKeysWithHttpInfo",
    value: function getKeysWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'store_id' is set.
      if (options['store_id'] === undefined || options['store_id'] === null) {
        throw new Error("Missing the required parameter 'store_id'.");
      }
      var pathParams = {
        'store_id': options['store_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {
        'cursor': options['cursor'],
        'limit': options['limit'],
        'prefix': options['prefix']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/resources/stores/kv/{store_id}/keys', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List the keys of all items within an kv store.
     * @param {Object} options
     * @param {String} options.store_id
     * @param {String} [options.cursor]
     * @param {Number} [options.limit=100]
     * @param {String} [options.prefix]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
  }, {
    key: "getKeys",
    value: function getKeys() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getKeysWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get the value associated with a key.
     * @param {Object} options
     * @param {String} options.store_id
     * @param {String} options.key_name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Blob} and HTTP response
     */
  }, {
    key: "getValueForKeyWithHttpInfo",
    value: function getValueForKeyWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'store_id' is set.
      if (options['store_id'] === undefined || options['store_id'] === null) {
        throw new Error("Missing the required parameter 'store_id'.");
      }
      // Verify the required parameter 'key_name' is set.
      if (options['key_name'] === undefined || options['key_name'] === null) {
        throw new Error("Missing the required parameter 'key_name'.");
      }
      var pathParams = {
        'store_id': options['store_id'],
        'key_name': options['key_name']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';
      return this.apiClient.callApi('/resources/stores/kv/{store_id}/keys/{key_name}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get the value associated with a key.
     * @param {Object} options
     * @param {String} options.store_id
     * @param {String} options.key_name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Blob}
     */
  }, {
    key: "getValueForKey",
    value: function getValueForKey() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getValueForKeyWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Set a new value for a new or existing key in an kv store.
     * @param {Object} options
     * @param {String} options.store_id
     * @param {String} options.key_name
     * @param {Number} [options.if_generation_match]
     * @param {Number} [options.time_to_live_sec]
     * @param {String} [options.metadata]
     * @param {Boolean} [options.add]
     * @param {Boolean} [options.append]
     * @param {Boolean} [options.prepend]
     * @param {Boolean} [options.background_fetch]
     * @param {Blob} [options.body]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Blob} and HTTP response
     */
  }, {
    key: "setValueForKeyWithHttpInfo",
    value: function setValueForKeyWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = options['body'];
      // Verify the required parameter 'store_id' is set.
      if (options['store_id'] === undefined || options['store_id'] === null) {
        throw new Error("Missing the required parameter 'store_id'.");
      }
      // Verify the required parameter 'key_name' is set.
      if (options['key_name'] === undefined || options['key_name'] === null) {
        throw new Error("Missing the required parameter 'key_name'.");
      }
      var pathParams = {
        'store_id': options['store_id'],
        'key_name': options['key_name']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {
        'add': options['add'],
        'append': options['append'],
        'prepend': options['prepend'],
        'background_fetch': options['background_fetch']
      };
      var headerParams = {
        'if-generation-match': options['if_generation_match'],
        'time_to_live_sec': options['time_to_live_sec'],
        'metadata': options['metadata']
      };
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';
      return this.apiClient.callApi('/resources/stores/kv/{store_id}/keys/{key_name}', 'PUT', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Set a new value for a new or existing key in an kv store.
     * @param {Object} options
     * @param {String} options.store_id
     * @param {String} options.key_name
     * @param {Number} [options.if_generation_match]
     * @param {Number} [options.time_to_live_sec]
     * @param {String} [options.metadata]
     * @param {Boolean} [options.add]
     * @param {Boolean} [options.append]
     * @param {Boolean} [options.prepend]
     * @param {Boolean} [options.background_fetch]
     * @param {Blob} [options.body]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Blob}
     */
  }, {
    key: "setValueForKey",
    value: function setValueForKey() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.setValueForKeyWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return KvStoreItemApi;
}();
exports["default"] = KvStoreItemApi;