"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _InlineResponse = _interopRequireDefault(require("../model/InlineResponse200"));
var _ServerResponse = _interopRequireDefault(require("../model/ServerResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* Server service.
* @module api/ServerApi
* @version 4.1.1
*/
var ServerApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ServerApi. 
  * @alias module:api/ServerApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ServerApi(apiClient) {
    _classCallCheck(this, ServerApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Creates a single server for a particular service and pool.
   * @param {Object} options
   * @param {String} options.service_id - Alphanumeric string identifying the service.
   * @param {String} options.pool_id - Alphanumeric string identifying a Pool.
   * @param {Number} [options.weight=100] - Weight (`1-100`) used to load balance this server against others.
   * @param {Number} [options.max_conn=0] - Maximum number of connections. If the value is `0`, it inherits the value from pool's `max_conn_default`.
   * @param {Number} [options.port=80] - Port number. Setting port `443` does not force TLS. Set `use_tls` in pool to force TLS.
   * @param {String} [options.address] - A hostname, IPv4, or IPv6 address for the server. Required.
   * @param {String} [options.comment] - A freeform descriptive note.
   * @param {Boolean} [options.disabled=false] - Allows servers to be enabled and disabled in a pool.
   * @param {String} [options.override_host='null'] - The hostname to override the Host header. Defaults to `null` meaning no override of the Host header if not set. This setting can also be added to a Pool definition. However, the server setting will override the Pool setting.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServerResponse} and HTTP response
   */
  _createClass(ServerApi, [{
    key: "createPoolServerWithHttpInfo",
    value: function createPoolServerWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'pool_id' is set.
      if (options['pool_id'] === undefined || options['pool_id'] === null) {
        throw new Error("Missing the required parameter 'pool_id'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'pool_id': options['pool_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'weight': options['weight'],
        'max_conn': options['max_conn'],
        'port': options['port'],
        'address': options['address'],
        'comment': options['comment'],
        'disabled': options['disabled'],
        'override_host': options['override_host']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ServerResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/pool/{pool_id}/server', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Creates a single server for a particular service and pool.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.pool_id - Alphanumeric string identifying a Pool.
     * @param {Number} [options.weight=100] - Weight (`1-100`) used to load balance this server against others.
     * @param {Number} [options.max_conn=0] - Maximum number of connections. If the value is `0`, it inherits the value from pool's `max_conn_default`.
     * @param {Number} [options.port=80] - Port number. Setting port `443` does not force TLS. Set `use_tls` in pool to force TLS.
     * @param {String} [options.address] - A hostname, IPv4, or IPv6 address for the server. Required.
     * @param {String} [options.comment] - A freeform descriptive note.
     * @param {Boolean} [options.disabled=false] - Allows servers to be enabled and disabled in a pool.
     * @param {String} [options.override_host='null'] - The hostname to override the Host header. Defaults to `null` meaning no override of the Host header if not set. This setting can also be added to a Pool definition. However, the server setting will override the Pool setting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServerResponse}
     */
  }, {
    key: "createPoolServer",
    value: function createPoolServer() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.createPoolServerWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Deletes a single server for a particular service and pool.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.pool_id - Alphanumeric string identifying a Pool.
     * @param {String} options.server_id - Alphanumeric string identifying a Server.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
  }, {
    key: "deletePoolServerWithHttpInfo",
    value: function deletePoolServerWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'pool_id' is set.
      if (options['pool_id'] === undefined || options['pool_id'] === null) {
        throw new Error("Missing the required parameter 'pool_id'.");
      }
      // Verify the required parameter 'server_id' is set.
      if (options['server_id'] === undefined || options['server_id'] === null) {
        throw new Error("Missing the required parameter 'server_id'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'pool_id': options['pool_id'],
        'server_id': options['server_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/pool/{pool_id}/server/{server_id}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Deletes a single server for a particular service and pool.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.pool_id - Alphanumeric string identifying a Pool.
     * @param {String} options.server_id - Alphanumeric string identifying a Server.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
  }, {
    key: "deletePoolServer",
    value: function deletePoolServer() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deletePoolServerWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Gets a single server for a particular service and pool.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.pool_id - Alphanumeric string identifying a Pool.
     * @param {String} options.server_id - Alphanumeric string identifying a Server.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServerResponse} and HTTP response
     */
  }, {
    key: "getPoolServerWithHttpInfo",
    value: function getPoolServerWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'pool_id' is set.
      if (options['pool_id'] === undefined || options['pool_id'] === null) {
        throw new Error("Missing the required parameter 'pool_id'.");
      }
      // Verify the required parameter 'server_id' is set.
      if (options['server_id'] === undefined || options['server_id'] === null) {
        throw new Error("Missing the required parameter 'server_id'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'pool_id': options['pool_id'],
        'server_id': options['server_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ServerResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/pool/{pool_id}/server/{server_id}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Gets a single server for a particular service and pool.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.pool_id - Alphanumeric string identifying a Pool.
     * @param {String} options.server_id - Alphanumeric string identifying a Server.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServerResponse}
     */
  }, {
    key: "getPoolServer",
    value: function getPoolServer() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getPoolServerWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Lists all servers for a particular service and pool.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.pool_id - Alphanumeric string identifying a Pool.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServerResponse>} and HTTP response
     */
  }, {
    key: "listPoolServersWithHttpInfo",
    value: function listPoolServersWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'pool_id' is set.
      if (options['pool_id'] === undefined || options['pool_id'] === null) {
        throw new Error("Missing the required parameter 'pool_id'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'pool_id': options['pool_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_ServerResponse["default"]];
      return this.apiClient.callApi('/service/{service_id}/pool/{pool_id}/servers', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Lists all servers for a particular service and pool.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.pool_id - Alphanumeric string identifying a Pool.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServerResponse>}
     */
  }, {
    key: "listPoolServers",
    value: function listPoolServers() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listPoolServersWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Updates a single server for a particular service and pool.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.pool_id - Alphanumeric string identifying a Pool.
     * @param {String} options.server_id - Alphanumeric string identifying a Server.
     * @param {Number} [options.weight=100] - Weight (`1-100`) used to load balance this server against others.
     * @param {Number} [options.max_conn=0] - Maximum number of connections. If the value is `0`, it inherits the value from pool's `max_conn_default`.
     * @param {Number} [options.port=80] - Port number. Setting port `443` does not force TLS. Set `use_tls` in pool to force TLS.
     * @param {String} [options.address] - A hostname, IPv4, or IPv6 address for the server. Required.
     * @param {String} [options.comment] - A freeform descriptive note.
     * @param {Boolean} [options.disabled=false] - Allows servers to be enabled and disabled in a pool.
     * @param {String} [options.override_host='null'] - The hostname to override the Host header. Defaults to `null` meaning no override of the Host header if not set. This setting can also be added to a Pool definition. However, the server setting will override the Pool setting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServerResponse} and HTTP response
     */
  }, {
    key: "updatePoolServerWithHttpInfo",
    value: function updatePoolServerWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'pool_id' is set.
      if (options['pool_id'] === undefined || options['pool_id'] === null) {
        throw new Error("Missing the required parameter 'pool_id'.");
      }
      // Verify the required parameter 'server_id' is set.
      if (options['server_id'] === undefined || options['server_id'] === null) {
        throw new Error("Missing the required parameter 'server_id'.");
      }
      var pathParams = {
        'service_id': options['service_id'],
        'pool_id': options['pool_id'],
        'server_id': options['server_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'weight': options['weight'],
        'max_conn': options['max_conn'],
        'port': options['port'],
        'address': options['address'],
        'comment': options['comment'],
        'disabled': options['disabled'],
        'override_host': options['override_host']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ServerResponse["default"];
      return this.apiClient.callApi('/service/{service_id}/pool/{pool_id}/server/{server_id}', 'PUT', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Updates a single server for a particular service and pool.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {String} options.pool_id - Alphanumeric string identifying a Pool.
     * @param {String} options.server_id - Alphanumeric string identifying a Server.
     * @param {Number} [options.weight=100] - Weight (`1-100`) used to load balance this server against others.
     * @param {Number} [options.max_conn=0] - Maximum number of connections. If the value is `0`, it inherits the value from pool's `max_conn_default`.
     * @param {Number} [options.port=80] - Port number. Setting port `443` does not force TLS. Set `use_tls` in pool to force TLS.
     * @param {String} [options.address] - A hostname, IPv4, or IPv6 address for the server. Required.
     * @param {String} [options.comment] - A freeform descriptive note.
     * @param {Boolean} [options.disabled=false] - Allows servers to be enabled and disabled in a pool.
     * @param {String} [options.override_host='null'] - The hostname to override the Host header. Defaults to `null` meaning no override of the Host header if not set. This setting can also be added to a Pool definition. However, the server setting will override the Pool setting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServerResponse}
     */
  }, {
    key: "updatePoolServer",
    value: function updatePoolServer() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.updatePoolServerWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ServerApi;
}();
exports["default"] = ServerApi;