"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ServiceAuthorization = _interopRequireDefault(require("../model/ServiceAuthorization"));
var _ServiceAuthorizationResponse = _interopRequireDefault(require("../model/ServiceAuthorizationResponse"));
var _ServiceAuthorizationsResponse = _interopRequireDefault(require("../model/ServiceAuthorizationsResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* ServiceAuthorizations service.
* @module api/ServiceAuthorizationsApi
* @version 4.1.1
*/
var ServiceAuthorizationsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ServiceAuthorizationsApi. 
  * @alias module:api/ServiceAuthorizationsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ServiceAuthorizationsApi(apiClient) {
    _classCallCheck(this, ServiceAuthorizationsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Create service authorization.
   * @param {Object} options
   * @param {module:model/ServiceAuthorization} [options.service_authorization]
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceAuthorizationResponse} and HTTP response
   */
  _createClass(ServiceAuthorizationsApi, [{
    key: "createServiceAuthorizationWithHttpInfo",
    value: function createServiceAuthorizationWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = options['service_authorization'];
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = _ServiceAuthorizationResponse["default"];
      return this.apiClient.callApi('/service-authorizations', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create service authorization.
     * @param {Object} options
     * @param {module:model/ServiceAuthorization} [options.service_authorization]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceAuthorizationResponse}
     */
  }, {
    key: "createServiceAuthorization",
    value: function createServiceAuthorization() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.createServiceAuthorizationWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete service authorization.
     * @param {Object} options
     * @param {String} options.service_authorization_id - Alphanumeric string identifying a service authorization.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "deleteServiceAuthorizationWithHttpInfo",
    value: function deleteServiceAuthorizationWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_authorization_id' is set.
      if (options['service_authorization_id'] === undefined || options['service_authorization_id'] === null) {
        throw new Error("Missing the required parameter 'service_authorization_id'.");
      }
      var pathParams = {
        'service_authorization_id': options['service_authorization_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/service-authorizations/{service_authorization_id}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete service authorization.
     * @param {Object} options
     * @param {String} options.service_authorization_id - Alphanumeric string identifying a service authorization.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "deleteServiceAuthorization",
    value: function deleteServiceAuthorization() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteServiceAuthorizationWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List service authorizations.
     * @param {Object} options
     * @param {Number} [options.page_number] - Current page.
     * @param {Number} [options.page_size=20] - Number of records per page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceAuthorizationsResponse} and HTTP response
     */
  }, {
    key: "listServiceAuthorizationWithHttpInfo",
    value: function listServiceAuthorizationWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {
        'page[number]': options['page_number'],
        'page[size]': options['page_size']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/vnd.api+json'];
      var returnType = _ServiceAuthorizationsResponse["default"];
      return this.apiClient.callApi('/service-authorizations', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List service authorizations.
     * @param {Object} options
     * @param {Number} [options.page_number] - Current page.
     * @param {Number} [options.page_size=20] - Number of records per page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceAuthorizationsResponse}
     */
  }, {
    key: "listServiceAuthorization",
    value: function listServiceAuthorization() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listServiceAuthorizationWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Show service authorization.
     * @param {Object} options
     * @param {String} options.service_authorization_id - Alphanumeric string identifying a service authorization.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceAuthorizationResponse} and HTTP response
     */
  }, {
    key: "showServiceAuthorizationWithHttpInfo",
    value: function showServiceAuthorizationWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'service_authorization_id' is set.
      if (options['service_authorization_id'] === undefined || options['service_authorization_id'] === null) {
        throw new Error("Missing the required parameter 'service_authorization_id'.");
      }
      var pathParams = {
        'service_authorization_id': options['service_authorization_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/vnd.api+json'];
      var returnType = _ServiceAuthorizationResponse["default"];
      return this.apiClient.callApi('/service-authorizations/{service_authorization_id}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Show service authorization.
     * @param {Object} options
     * @param {String} options.service_authorization_id - Alphanumeric string identifying a service authorization.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceAuthorizationResponse}
     */
  }, {
    key: "showServiceAuthorization",
    value: function showServiceAuthorization() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.showServiceAuthorizationWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update service authorization.
     * @param {Object} options
     * @param {String} options.service_authorization_id - Alphanumeric string identifying a service authorization.
     * @param {module:model/ServiceAuthorization} [options.service_authorization]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceAuthorizationResponse} and HTTP response
     */
  }, {
    key: "updateServiceAuthorizationWithHttpInfo",
    value: function updateServiceAuthorizationWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = options['service_authorization'];
      // Verify the required parameter 'service_authorization_id' is set.
      if (options['service_authorization_id'] === undefined || options['service_authorization_id'] === null) {
        throw new Error("Missing the required parameter 'service_authorization_id'.");
      }
      var pathParams = {
        'service_authorization_id': options['service_authorization_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = _ServiceAuthorizationResponse["default"];
      return this.apiClient.callApi('/service-authorizations/{service_authorization_id}', 'PATCH', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update service authorization.
     * @param {Object} options
     * @param {String} options.service_authorization_id - Alphanumeric string identifying a service authorization.
     * @param {module:model/ServiceAuthorization} [options.service_authorization]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceAuthorizationResponse}
     */
  }, {
    key: "updateServiceAuthorization",
    value: function updateServiceAuthorization() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.updateServiceAuthorizationWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ServiceAuthorizationsApi;
}();
exports["default"] = ServiceAuthorizationsApi;