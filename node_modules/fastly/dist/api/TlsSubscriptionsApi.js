"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _TlsSubscription = _interopRequireDefault(require("../model/TlsSubscription"));
var _TlsSubscriptionResponse = _interopRequireDefault(require("../model/TlsSubscriptionResponse"));
var _TlsSubscriptionsResponse = _interopRequireDefault(require("../model/TlsSubscriptionsResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* TlsSubscriptions service.
* @module api/TlsSubscriptionsApi
* @version 4.1.1
*/
var TlsSubscriptionsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new TlsSubscriptionsApi. 
  * @alias module:api/TlsSubscriptionsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function TlsSubscriptionsApi(apiClient) {
    _classCallCheck(this, TlsSubscriptionsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Creates an email challenge for a domain on a GlobalSign subscription. An email challenge will generate an email that can be used to validate domain ownership. If this challenge is created, then the domain can only be validated using email for the given subscription. 
   * @param {Object} options
   * @param {String} options.tls_subscription_id - Alphanumeric string identifying a TLS subscription.
   * @param {String} options.tls_authorization_id - Alphanumeric string identifying a TLS subscription.
   * @param {Object.<String, {String: Object}>} [options.request_body]
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */
  _createClass(TlsSubscriptionsApi, [{
    key: "createGlobalsignEmailChallengeWithHttpInfo",
    value: function createGlobalsignEmailChallengeWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = options['request_body'];
      // Verify the required parameter 'tls_subscription_id' is set.
      if (options['tls_subscription_id'] === undefined || options['tls_subscription_id'] === null) {
        throw new Error("Missing the required parameter 'tls_subscription_id'.");
      }
      // Verify the required parameter 'tls_authorization_id' is set.
      if (options['tls_authorization_id'] === undefined || options['tls_authorization_id'] === null) {
        throw new Error("Missing the required parameter 'tls_authorization_id'.");
      }
      var pathParams = {
        'tls_subscription_id': options['tls_subscription_id'],
        'tls_authorization_id': options['tls_authorization_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/tls/subscriptions/{tls_subscription_id}/authorizations/{tls_authorization_id}/globalsign_email_challenges', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Creates an email challenge for a domain on a GlobalSign subscription. An email challenge will generate an email that can be used to validate domain ownership. If this challenge is created, then the domain can only be validated using email for the given subscription. 
     * @param {Object} options
     * @param {String} options.tls_subscription_id - Alphanumeric string identifying a TLS subscription.
     * @param {String} options.tls_authorization_id - Alphanumeric string identifying a TLS subscription.
     * @param {Object.<String, {String: Object}>} [options.request_body]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "createGlobalsignEmailChallenge",
    value: function createGlobalsignEmailChallenge() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.createGlobalsignEmailChallengeWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create a new TLS subscription. This response includes a list of possible challenges to verify domain ownership.
     * @param {Object} options
     * @param {Boolean} [options.force] - A flag that allows you to edit and delete a subscription with active domains. Valid to use on PATCH and DELETE actions. As a warning, removing an active domain from a subscription or forcing the deletion of a subscription may result in breaking TLS termination to that domain. 
     * @param {module:model/TlsSubscription} [options.tls_subscription]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TlsSubscriptionResponse} and HTTP response
     */
  }, {
    key: "createTlsSubWithHttpInfo",
    value: function createTlsSubWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = options['tls_subscription'];
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {
        'force': options['force']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = _TlsSubscriptionResponse["default"];
      return this.apiClient.callApi('/tls/subscriptions', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create a new TLS subscription. This response includes a list of possible challenges to verify domain ownership.
     * @param {Object} options
     * @param {Boolean} [options.force] - A flag that allows you to edit and delete a subscription with active domains. Valid to use on PATCH and DELETE actions. As a warning, removing an active domain from a subscription or forcing the deletion of a subscription may result in breaking TLS termination to that domain. 
     * @param {module:model/TlsSubscription} [options.tls_subscription]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TlsSubscriptionResponse}
     */
  }, {
    key: "createTlsSub",
    value: function createTlsSub() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.createTlsSubWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Deletes a GlobalSign email challenge. After a GlobalSign email challenge is deleted, the domain can use HTTP and DNS validation methods again.
     * @param {Object} options
     * @param {String} options.tls_subscription_id - Alphanumeric string identifying a TLS subscription.
     * @param {String} options.globalsign_email_challenge_id - Alphanumeric string identifying a GlobalSign email challenge.
     * @param {String} options.tls_authorization_id - Alphanumeric string identifying a TLS subscription.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "deleteGlobalsignEmailChallengeWithHttpInfo",
    value: function deleteGlobalsignEmailChallengeWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'tls_subscription_id' is set.
      if (options['tls_subscription_id'] === undefined || options['tls_subscription_id'] === null) {
        throw new Error("Missing the required parameter 'tls_subscription_id'.");
      }
      // Verify the required parameter 'globalsign_email_challenge_id' is set.
      if (options['globalsign_email_challenge_id'] === undefined || options['globalsign_email_challenge_id'] === null) {
        throw new Error("Missing the required parameter 'globalsign_email_challenge_id'.");
      }
      // Verify the required parameter 'tls_authorization_id' is set.
      if (options['tls_authorization_id'] === undefined || options['tls_authorization_id'] === null) {
        throw new Error("Missing the required parameter 'tls_authorization_id'.");
      }
      var pathParams = {
        'tls_subscription_id': options['tls_subscription_id'],
        'globalsign_email_challenge_id': options['globalsign_email_challenge_id'],
        'tls_authorization_id': options['tls_authorization_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/tls/subscriptions/{tls_subscription_id}/authorizations/{tls_authorization_id}/globalsign_email_challenges/{globalsign_email_challenge_id}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Deletes a GlobalSign email challenge. After a GlobalSign email challenge is deleted, the domain can use HTTP and DNS validation methods again.
     * @param {Object} options
     * @param {String} options.tls_subscription_id - Alphanumeric string identifying a TLS subscription.
     * @param {String} options.globalsign_email_challenge_id - Alphanumeric string identifying a GlobalSign email challenge.
     * @param {String} options.tls_authorization_id - Alphanumeric string identifying a TLS subscription.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "deleteGlobalsignEmailChallenge",
    value: function deleteGlobalsignEmailChallenge() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteGlobalsignEmailChallengeWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Destroy a TLS subscription. A subscription cannot be destroyed if there are domains in the TLS enabled state.
     * @param {Object} options
     * @param {String} options.tls_subscription_id - Alphanumeric string identifying a TLS subscription.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "deleteTlsSubWithHttpInfo",
    value: function deleteTlsSubWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'tls_subscription_id' is set.
      if (options['tls_subscription_id'] === undefined || options['tls_subscription_id'] === null) {
        throw new Error("Missing the required parameter 'tls_subscription_id'.");
      }
      var pathParams = {
        'tls_subscription_id': options['tls_subscription_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/tls/subscriptions/{tls_subscription_id}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Destroy a TLS subscription. A subscription cannot be destroyed if there are domains in the TLS enabled state.
     * @param {Object} options
     * @param {String} options.tls_subscription_id - Alphanumeric string identifying a TLS subscription.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "deleteTlsSub",
    value: function deleteTlsSub() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteTlsSubWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Show a TLS subscription.
     * @param {Object} options
     * @param {String} options.tls_subscription_id - Alphanumeric string identifying a TLS subscription.
     * @param {String} [options.include] - Include related objects. Optional, comma-separated values. Permitted values: `tls_authorizations` and `tls_authorizations.globalsign_email_challenge`. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TlsSubscriptionResponse} and HTTP response
     */
  }, {
    key: "getTlsSubWithHttpInfo",
    value: function getTlsSubWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'tls_subscription_id' is set.
      if (options['tls_subscription_id'] === undefined || options['tls_subscription_id'] === null) {
        throw new Error("Missing the required parameter 'tls_subscription_id'.");
      }
      var pathParams = {
        'tls_subscription_id': options['tls_subscription_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {
        'include': options['include']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/vnd.api+json'];
      var returnType = _TlsSubscriptionResponse["default"];
      return this.apiClient.callApi('/tls/subscriptions/{tls_subscription_id}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Show a TLS subscription.
     * @param {Object} options
     * @param {String} options.tls_subscription_id - Alphanumeric string identifying a TLS subscription.
     * @param {String} [options.include] - Include related objects. Optional, comma-separated values. Permitted values: `tls_authorizations` and `tls_authorizations.globalsign_email_challenge`. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TlsSubscriptionResponse}
     */
  }, {
    key: "getTlsSub",
    value: function getTlsSub() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getTlsSubWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all TLS subscriptions.
     * @param {Object} options
     * @param {String} [options.filter_state] - Limit the returned subscriptions by state. Valid values are `pending`, `processing`, `issued`, `renewing`, and `failed`. Accepts parameters: `not` (e.g., `filter[state][not]=renewing`). 
     * @param {String} [options.filter_tls_domains_id] - Limit the returned subscriptions to those that include the specific domain.
     * @param {Boolean} [options.filter_has_active_order] - Limit the returned subscriptions to those that have currently active orders. Permitted values: `true`. 
     * @param {String} [options.include] - Include related objects. Optional, comma-separated values. Permitted values: `tls_authorizations` and `tls_authorizations.globalsign_email_challenge`. 
     * @param {Number} [options.page_number] - Current page.
     * @param {Number} [options.page_size=20] - Number of records per page.
     * @param {module:model/String} [options.sort='created_at'] - The order in which to list the results by creation date.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TlsSubscriptionsResponse} and HTTP response
     */
  }, {
    key: "listTlsSubsWithHttpInfo",
    value: function listTlsSubsWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {
        'filter[state]': options['filter_state'],
        'filter[tls_domains.id]': options['filter_tls_domains_id'],
        'filter[has_active_order]': options['filter_has_active_order'],
        'include': options['include'],
        'page[number]': options['page_number'],
        'page[size]': options['page_size'],
        'sort': options['sort']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/vnd.api+json'];
      var returnType = _TlsSubscriptionsResponse["default"];
      return this.apiClient.callApi('/tls/subscriptions', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all TLS subscriptions.
     * @param {Object} options
     * @param {String} [options.filter_state] - Limit the returned subscriptions by state. Valid values are `pending`, `processing`, `issued`, `renewing`, and `failed`. Accepts parameters: `not` (e.g., `filter[state][not]=renewing`). 
     * @param {String} [options.filter_tls_domains_id] - Limit the returned subscriptions to those that include the specific domain.
     * @param {Boolean} [options.filter_has_active_order] - Limit the returned subscriptions to those that have currently active orders. Permitted values: `true`. 
     * @param {String} [options.include] - Include related objects. Optional, comma-separated values. Permitted values: `tls_authorizations` and `tls_authorizations.globalsign_email_challenge`. 
     * @param {Number} [options.page_number] - Current page.
     * @param {Number} [options.page_size=20] - Number of records per page.
     * @param {module:model/String} [options.sort='created_at'] - The order in which to list the results by creation date.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TlsSubscriptionsResponse}
     */
  }, {
    key: "listTlsSubs",
    value: function listTlsSubs() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listTlsSubsWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Change the TLS domains or common name associated with this subscription, update the TLS configuration for this set of domains, or retry a subscription with state `failed` by setting the state to `retry`.
     * @param {Object} options
     * @param {String} options.tls_subscription_id - Alphanumeric string identifying a TLS subscription.
     * @param {Boolean} [options.force] - A flag that allows you to edit and delete a subscription with active domains. Valid to use on PATCH and DELETE actions. As a warning, removing an active domain from a subscription or forcing the deletion of a subscription may result in breaking TLS termination to that domain. 
     * @param {module:model/TlsSubscription} [options.tls_subscription]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TlsSubscriptionResponse} and HTTP response
     */
  }, {
    key: "patchTlsSubWithHttpInfo",
    value: function patchTlsSubWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = options['tls_subscription'];
      // Verify the required parameter 'tls_subscription_id' is set.
      if (options['tls_subscription_id'] === undefined || options['tls_subscription_id'] === null) {
        throw new Error("Missing the required parameter 'tls_subscription_id'.");
      }
      var pathParams = {
        'tls_subscription_id': options['tls_subscription_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {
        'force': options['force']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = _TlsSubscriptionResponse["default"];
      return this.apiClient.callApi('/tls/subscriptions/{tls_subscription_id}', 'PATCH', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Change the TLS domains or common name associated with this subscription, update the TLS configuration for this set of domains, or retry a subscription with state `failed` by setting the state to `retry`.
     * @param {Object} options
     * @param {String} options.tls_subscription_id - Alphanumeric string identifying a TLS subscription.
     * @param {Boolean} [options.force] - A flag that allows you to edit and delete a subscription with active domains. Valid to use on PATCH and DELETE actions. As a warning, removing an active domain from a subscription or forcing the deletion of a subscription may result in breaking TLS termination to that domain. 
     * @param {module:model/TlsSubscription} [options.tls_subscription]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TlsSubscriptionResponse}
     */
  }, {
    key: "patchTlsSub",
    value: function patchTlsSub() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.patchTlsSubWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return TlsSubscriptionsApi;
}();
exports["default"] = TlsSubscriptionsApi;