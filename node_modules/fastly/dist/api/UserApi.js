"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _InlineResponse = _interopRequireDefault(require("../model/InlineResponse200"));
var _RoleUser = _interopRequireDefault(require("../model/RoleUser"));
var _UserResponse = _interopRequireDefault(require("../model/UserResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Fastly API
                                                                                                                                                                                                                                                                                                                                                                                               * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: oss@fastly.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated.
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* User service.
* @module api/UserApi
* @version 4.1.1
*/
var UserApi = /*#__PURE__*/function () {
  /**
  * Constructs a new UserApi. 
  * @alias module:api/UserApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function UserApi(apiClient) {
    _classCallCheck(this, UserApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }

  /**
   * Create a user.
   * @param {Object} options
   * @param {String} [options.login]
   * @param {String} [options.name] - The real life name of the user.
   * @param {Boolean} [options.limit_services] - Indicates that the user has limited access to the customer's services.
   * @param {Boolean} [options.locked] - Indicates whether the is account is locked for editing or not.
   * @param {Boolean} [options.require_new_password] - Indicates if a new password is required at next login.
   * @param {module:model/RoleUser} [options.role]
   * @param {Boolean} [options.two_factor_auth_enabled] - Indicates if 2FA is enabled on the user.
   * @param {Boolean} [options.two_factor_setup_required] - Indicates if 2FA is required by the user's customer account.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserResponse} and HTTP response
   */
  _createClass(UserApi, [{
    key: "createUserWithHttpInfo",
    value: function createUserWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'login': options['login'],
        'name': options['name'],
        'limit_services': options['limit_services'],
        'locked': options['locked'],
        'require_new_password': options['require_new_password'],
        'role': options['role'],
        'two_factor_auth_enabled': options['two_factor_auth_enabled'],
        'two_factor_setup_required': options['two_factor_setup_required']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _UserResponse["default"];
      return this.apiClient.callApi('/user', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create a user.
     * @param {Object} options
     * @param {String} [options.login]
     * @param {String} [options.name] - The real life name of the user.
     * @param {Boolean} [options.limit_services] - Indicates that the user has limited access to the customer's services.
     * @param {Boolean} [options.locked] - Indicates whether the is account is locked for editing or not.
     * @param {Boolean} [options.require_new_password] - Indicates if a new password is required at next login.
     * @param {module:model/RoleUser} [options.role]
     * @param {Boolean} [options.two_factor_auth_enabled] - Indicates if 2FA is enabled on the user.
     * @param {Boolean} [options.two_factor_setup_required] - Indicates if 2FA is required by the user's customer account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserResponse}
     */
  }, {
    key: "createUser",
    value: function createUser() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.createUserWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete a user.
     * @param {Object} options
     * @param {String} options.user_id - Alphanumeric string identifying the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
  }, {
    key: "deleteUserWithHttpInfo",
    value: function deleteUserWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'user_id' is set.
      if (options['user_id'] === undefined || options['user_id'] === null) {
        throw new Error("Missing the required parameter 'user_id'.");
      }
      var pathParams = {
        'user_id': options['user_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/user/{user_id}', 'DELETE', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete a user.
     * @param {Object} options
     * @param {String} options.user_id - Alphanumeric string identifying the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
  }, {
    key: "deleteUser",
    value: function deleteUser() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteUserWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get the logged in user.
     * @param {Object} options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserResponse} and HTTP response
     */
  }, {
    key: "getCurrentUserWithHttpInfo",
    value: function getCurrentUserWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _UserResponse["default"];
      return this.apiClient.callApi('/current_user', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get the logged in user.
     * @param {Object} options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserResponse}
     */
  }, {
    key: "getCurrentUser",
    value: function getCurrentUser() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getCurrentUserWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get a specific user.
     * @param {Object} options
     * @param {String} options.user_id - Alphanumeric string identifying the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserResponse} and HTTP response
     */
  }, {
    key: "getUserWithHttpInfo",
    value: function getUserWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'user_id' is set.
      if (options['user_id'] === undefined || options['user_id'] === null) {
        throw new Error("Missing the required parameter 'user_id'.");
      }
      var pathParams = {
        'user_id': options['user_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _UserResponse["default"];
      return this.apiClient.callApi('/user/{user_id}', 'GET', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get a specific user.
     * @param {Object} options
     * @param {String} options.user_id - Alphanumeric string identifying the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserResponse}
     */
  }, {
    key: "getUser",
    value: function getUser() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getUserWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Requests a password reset for the specified user.
     * @param {Object} options
     * @param {String} options.user_login - The login associated with the user (typically, an email address).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
  }, {
    key: "requestPasswordResetWithHttpInfo",
    value: function requestPasswordResetWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'user_login' is set.
      if (options['user_login'] === undefined || options['user_login'] === null) {
        throw new Error("Missing the required parameter 'user_login'.");
      }
      var pathParams = {
        'user_login': options['user_login']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/user/{user_login}/password/request_reset', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Requests a password reset for the specified user.
     * @param {Object} options
     * @param {String} options.user_login - The login associated with the user (typically, an email address).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
  }, {
    key: "requestPasswordReset",
    value: function requestPasswordReset() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.requestPasswordResetWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update a user. Only users with the role of `superuser` can make changes to other users on the account. Non-superusers may use this endpoint to make changes to their own account. Two-factor attributes are not editable via this endpoint.
     * @param {Object} options
     * @param {String} options.user_id - Alphanumeric string identifying the user.
     * @param {String} [options.login]
     * @param {String} [options.name] - The real life name of the user.
     * @param {Boolean} [options.limit_services] - Indicates that the user has limited access to the customer's services.
     * @param {Boolean} [options.locked] - Indicates whether the is account is locked for editing or not.
     * @param {Boolean} [options.require_new_password] - Indicates if a new password is required at next login.
     * @param {module:model/RoleUser} [options.role]
     * @param {Boolean} [options.two_factor_auth_enabled] - Indicates if 2FA is enabled on the user.
     * @param {Boolean} [options.two_factor_setup_required] - Indicates if 2FA is required by the user's customer account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserResponse} and HTTP response
     */
  }, {
    key: "updateUserWithHttpInfo",
    value: function updateUserWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      // Verify the required parameter 'user_id' is set.
      if (options['user_id'] === undefined || options['user_id'] === null) {
        throw new Error("Missing the required parameter 'user_id'.");
      }
      var pathParams = {
        'user_id': options['user_id']
      };
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'login': options['login'],
        'name': options['name'],
        'limit_services': options['limit_services'],
        'locked': options['locked'],
        'require_new_password': options['require_new_password'],
        'role': options['role'],
        'two_factor_auth_enabled': options['two_factor_auth_enabled'],
        'two_factor_setup_required': options['two_factor_setup_required']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _UserResponse["default"];
      return this.apiClient.callApi('/user/{user_id}', 'PUT', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update a user. Only users with the role of `superuser` can make changes to other users on the account. Non-superusers may use this endpoint to make changes to their own account. Two-factor attributes are not editable via this endpoint.
     * @param {Object} options
     * @param {String} options.user_id - Alphanumeric string identifying the user.
     * @param {String} [options.login]
     * @param {String} [options.name] - The real life name of the user.
     * @param {Boolean} [options.limit_services] - Indicates that the user has limited access to the customer's services.
     * @param {Boolean} [options.locked] - Indicates whether the is account is locked for editing or not.
     * @param {Boolean} [options.require_new_password] - Indicates if a new password is required at next login.
     * @param {module:model/RoleUser} [options.role]
     * @param {Boolean} [options.two_factor_auth_enabled] - Indicates if 2FA is enabled on the user.
     * @param {Boolean} [options.two_factor_setup_required] - Indicates if 2FA is required by the user's customer account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserResponse}
     */
  }, {
    key: "updateUser",
    value: function updateUser() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.updateUserWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update the user's password to a new one.
     * @param {Object} options
     * @param {String} [options.old_password] - The user's current password.
     * @param {String} [options.new_password] - The user's new password.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserResponse} and HTTP response
     */
  }, {
    key: "updateUserPasswordWithHttpInfo",
    value: function updateUserPasswordWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var pathParamsAllowReserved = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'old_password': options['old_password'],
        'new_password': options['new_password']
      };
      var authNames = ['session_password_change'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _UserResponse["default"];
      return this.apiClient.callApi('/current_user/password', 'POST', pathParams, pathParamsAllowReserved, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update the user's password to a new one.
     * @param {Object} options
     * @param {String} [options.old_password] - The user's current password.
     * @param {String} [options.new_password] - The user's new password.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserResponse}
     */
  }, {
    key: "updateUserPassword",
    value: function updateUserPassword() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.updateUserPasswordWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return UserApi;
}();
exports["default"] = UserApi;